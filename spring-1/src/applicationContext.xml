<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd">

	<!--  配置bean -->
	<bean id="helloWorld" class="com.ben.spring.beans.HelloWorld">
		<property name="name2" value="Spring"></property>
	</bean>
	
	<!-- 通过构造器注入属性值 -->
	<bean id="car" class="com.ben.spring.beans.Car">
		<constructor-arg value="Audi" index="0"></constructor-arg>
		<constructor-arg value="Shanghai" index="1"></constructor-arg>
		<constructor-arg value="300000" type="double"></constructor-arg>
	</bean>
	<!-- 使用构造器注入属性值可以指定参数的位置和参数的类型，以区分重载的构造器-->
	<bean id="car2" class="com.ben.spring.beans.Car">
		<constructor-arg value="BMW" type="java.lang.String"></constructor-arg>
		<constructor-arg type="java.lang.String">
		<!-- 若字面值包含特殊字符，可以使用CDATA包括起来 -->
			<value><![CDATA[<Shanghai^>]]></value>
		</constructor-arg>
		<constructor-arg type="int">
			<value>250</value>
		</constructor-arg>
	</bean>
	
	<bean id="person" class="com.ben.spring.beans.Person">
		<property name="name" value="Ben"></property>
		<property name="age" value="25"></property>
		<!-- property 的ref 属性指定bean 之间的引用关系 -->
		<!-- <property name="car" ref="car2"></property> -->
		<!-- 
			<property name="car">
				<ref bean="car2"/>
			</property>
		 -->
		 <!-- 内部bean -->
		 <property name="car">
			<bean class="com.ben.spring.beans.Car">
				<constructor-arg value="Fort"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="200000" type="double"></constructor-arg>
			</bean> 
		 </property>
	</bean>
	
	<bean id="person2" class="com.ben.spring.beans.Person">
		<constructor-arg value="KLK"></constructor-arg>
		<constructor-arg value="28"></constructor-arg>
		<!--<constructor-arg ref="car"></constructor-arg> -->
		<!-- 测试赋值 null -->
		<!-- <constructor-arg><null/></constructor-arg> -->
		<constructor-arg ref="car"></constructor-arg>
		<!-- 级联属性赋值 注意： 属性需要先初始化后才可以为级联属性赋值， 否则会有异常 和 Struts2 不同-->
		<property name="car.maxSpeed" value="260"></property>
	</bean>
	
	<!-- 测试如何配置集合属性 -->
	<bean id="person3" class="com.ben.spring.beans.collection.Person">
		<property name="name" value="Mike"></property>
		<property name="age" value="27"></property>
		<property name="cars">
			<list>
				<ref bean="car"/>
				<ref bean="car2"/>
				<bean class="com.ben.spring.beans.Car">
					<constructor-arg value="Fort"></constructor-arg>
					<constructor-arg value="Changan"></constructor-arg>
					<constructor-arg value="200000" type="double"></constructor-arg>
				</bean> 
			</list>
		</property>
	</bean>
	
	<!-- 配置Map 属性值 -->
	<bean id="newPerson" class="com.ben.spring.beans.collection.NewPerson">
		<property name="name" value="Rose"></property>
		<property name="age" value="28"></property>
		<property name="cars">
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
	</bean>

	<!-- 配置Properties 属性值 -->
	<bean id="dataSource" class="com.ben.spring.beans.collection.DataSource">
		<property name="properties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql:///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置独立的集合bean， 以供多个bean 进行引用： 需要导入util 命名空间 -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	<bean id="person4" class="com.ben.spring.beans.collection.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 通过p 命名空间为bean 的属性赋值，需要先导入p 命名空间， 相对于传统的配置方式更简洁 -->
	<bean id="person5" class="com.ben.spring.beans.collection.Person"
		p:age="30"
		p:name="Queen"
		p:cars-ref="cars">
		
	</bean>
</beans>
